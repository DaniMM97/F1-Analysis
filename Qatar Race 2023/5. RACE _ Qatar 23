{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["LYVPsjl310NR","0z9vvC6C9pF8","q-kq44hm6Rgl","rbESZQBF_kfu","q02nlq7k91Qg","14d3915b","KLGIUN68g3Kw","E29bAe6dS7aH","558e13ef","of4w4yAlB3GR","DtQ3hA1hBJUj","WL5zUZh_BK6v","vDF0wwPAB08P","nK3fnmWcxbEy","wD3ODUiv7607","xxkHKGus1hEr"],"authorship_tag":"ABX9TyP9dQXShthL78KbSfnl9erG"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Config"],"metadata":{"id":"LYVPsjl310NR"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"1VzSLqGS8crx"},"outputs":[],"source":["!pip install fastf1"]},{"cell_type":"code","source":["import fastf1 as ff1\n","from fastf1 import plotting\n","from fastf1 import utils\n","import matplotlib as mpl\n","from matplotlib import pyplot as plt\n","from matplotlib.pyplot import figure\n","from matplotlib.collections import LineCollection\n","from timple.timedelta import strftimedelta\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","sns.set_style(\"darkgrid\")\n","import requests"],"metadata":{"id":"_W7y7rI28h-L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"W1sYFRpP9Bos","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696704212140,"user_tz":-120,"elapsed":38308,"user":{"displayName":"Daniel Muñoz Martínez","userId":"06122393357673151477"}},"outputId":"1be00060-e2d4-41a6-846b-5ebd121627d0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# Set the cache directory (need a 'cache' folder) avoid long waiting times\n","ff1.Cache.enable_cache('/content/drive/MyDrive/F1/cache')"],"metadata":{"id":"AVgGsfLX9KZA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["race = ff1.get_session(2023, \"Qatar\", 'S')\n","race.load()"],"metadata":{"id":"L7wBczGF8mFQ","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1696704402718,"user_tz":-120,"elapsed":3561,"user":{"displayName":"Daniel Muñoz Martínez","userId":"06122393357673151477"}},"outputId":"01a2d696-3d9b-4d9b-ee13-bd996ee56c30"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["core           INFO \tLoading data for Qatar Grand Prix - Sprint [v3.1.2]\n","INFO:fastf1.fastf1.core:Loading data for Qatar Grand Prix - Sprint [v3.1.2]\n","req            INFO \tNo cached data found for session_info. Loading data...\n","INFO:fastf1.fastf1.req:No cached data found for session_info. Loading data...\n","_api           INFO \tFetching session info data...\n","INFO:fastf1.api:Fetching session info data...\n","logger      WARNING \tFailed to load session info data!\n","WARNING:fastf1.fastf1.core:Failed to load session info data!\n","DEBUG:fastf1.fastf1.core:Traceback for failure in session info data\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/logger.py\", line 152, in __wrapped\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/core.py\", line 1284, in _load_session_info\n","    self._session_info = api.session_info(self.api_path,\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/req.py\", line 433, in _cached_api_request\n","    data = func(api_path, **func_kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/_api.py\", line 1657, in session_info\n","    raise SessionNotAvailableError(\n","fastf1._api.SessionNotAvailableError: No data for this session! If this session only finished recently, please try again in a few minutes.\n","req            INFO \tNo cached data found for driver_info. Loading data...\n","INFO:fastf1.fastf1.req:No cached data found for driver_info. Loading data...\n","_api           INFO \tFetching driver list...\n","INFO:fastf1.api:Fetching driver list...\n","core        WARNING \tFailed to load extended driver information!\n","WARNING:fastf1.fastf1.core:Failed to load extended driver information!\n","DEBUG:fastf1.fastf1.core:Exception while loading driver list\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/core.py\", line 1972, in _drivers_from_f1_api\n","    f1di = api.driver_info(self.api_path, livedata=livedata)\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/req.py\", line 433, in _cached_api_request\n","    data = func(api_path, **func_kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/_api.py\", line 1485, in driver_info\n","    raise SessionNotAvailableError(\n","fastf1._api.SessionNotAvailableError: No data for this session! If this session only finished recently, please try again in a few minutes.\n","core        WARNING \tNo result data for this session available on Ergast! (This is expected for recent sessions)\n","WARNING:fastf1.fastf1.core:No result data for this session available on Ergast! (This is expected for recent sessions)\n","logger      WARNING \tFailed to load results data!\n","WARNING:fastf1.fastf1.core:Failed to load results data!\n","DEBUG:fastf1.fastf1.core:Traceback for failure in results\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/logger.py\", line 152, in __wrapped\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/core.py\", line 1962, in _load_drivers_results\n","    if (dupl_mask := self._results.index.duplicated()).any():\n","AttributeError: 'Session' object has no attribute '_results'\n","req            INFO \tNo cached data found for session_status_data. Loading data...\n","INFO:fastf1.fastf1.req:No cached data found for session_status_data. Loading data...\n","_api           INFO \tFetching session status data...\n","INFO:fastf1.api:Fetching session status data...\n","logger      WARNING \tFailed to load session status data!\n","WARNING:fastf1.fastf1.core:Failed to load session status data!\n","DEBUG:fastf1.fastf1.core:Traceback for failure in session status data\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/logger.py\", line 152, in __wrapped\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/core.py\", line 1809, in _load_session_status_data\n","    session_status = api.session_status_data(self.api_path,\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/req.py\", line 433, in _cached_api_request\n","    data = func(api_path, **func_kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/_api.py\", line 1284, in session_status_data\n","    raise SessionNotAvailableError(\n","fastf1._api.SessionNotAvailableError: No data for this session! If this session only finished recently, please try again in a few minutes.\n","req            INFO \tNo cached data found for lap_count. Loading data...\n","INFO:fastf1.fastf1.req:No cached data found for lap_count. Loading data...\n","_api           INFO \tFetching lap count data...\n","INFO:fastf1.api:Fetching lap count data...\n","logger      WARNING \tFailed to load total lap count!\n","WARNING:fastf1.fastf1.core:Failed to load total lap count!\n","DEBUG:fastf1.fastf1.core:Traceback for failure in total lap count\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/logger.py\", line 152, in __wrapped\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/core.py\", line 1794, in _load_total_lap_count\n","    lap_count = api.lap_count(self.api_path, livedata=livedata)\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/req.py\", line 433, in _cached_api_request\n","    data = func(api_path, **func_kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/_api.py\", line 1426, in lap_count\n","    raise SessionNotAvailableError(\n","fastf1._api.SessionNotAvailableError: No data for this session! If this session only finished recently, please try again in a few minutes.\n","req            INFO \tNo cached data found for track_status_data. Loading data...\n","INFO:fastf1.fastf1.req:No cached data found for track_status_data. Loading data...\n","_api           INFO \tFetching track status data...\n","INFO:fastf1.api:Fetching track status data...\n","logger      WARNING \tFailed to load track status data!\n","WARNING:fastf1.fastf1.core:Failed to load track status data!\n","DEBUG:fastf1.fastf1.core:Traceback for failure in track status data\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/logger.py\", line 152, in __wrapped\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/core.py\", line 1781, in _load_track_status_data\n","    track_status = api.track_status_data(self.api_path, livedata=livedata)\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/req.py\", line 433, in _cached_api_request\n","    data = func(api_path, **func_kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/_api.py\", line 1228, in track_status_data\n","    raise SessionNotAvailableError(\n","fastf1._api.SessionNotAvailableError: No data for this session! If this session only finished recently, please try again in a few minutes.\n","req            INFO \tNo cached data found for _extended_timing_data. Loading data...\n","INFO:fastf1.fastf1.req:No cached data found for _extended_timing_data. Loading data...\n","_api           INFO \tFetching timing data...\n","INFO:fastf1.api:Fetching timing data...\n","logger      WARNING \tFailed to load timing data!\n","WARNING:fastf1.fastf1.core:Failed to load timing data!\n","DEBUG:fastf1.fastf1.core:Traceback for failure in lap timing data\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/logger.py\", line 152, in __wrapped\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/core.py\", line 1290, in _load_laps_data\n","    = api._extended_timing_data(self.api_path, livedata=livedata)\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/req.py\", line 433, in _cached_api_request\n","    data = func(api_path, **func_kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/_api.py\", line 177, in _extended_timing_data\n","    raise SessionNotAvailableError(\n","fastf1._api.SessionNotAvailableError: No data for this session! If this session only finished recently, please try again in a few minutes.\n","req            INFO \tNo cached data found for car_data. Loading data...\n","INFO:fastf1.fastf1.req:No cached data found for car_data. Loading data...\n","_api           INFO \tFetching car data...\n","INFO:fastf1.api:Fetching car data...\n","core        WARNING \tCar telemetry data is unavailable!\n","WARNING:fastf1.fastf1.core:Car telemetry data is unavailable!\n","req            INFO \tNo cached data found for position_data. Loading data...\n","INFO:fastf1.fastf1.req:No cached data found for position_data. Loading data...\n","_api           INFO \tFetching position data...\n","INFO:fastf1.api:Fetching position data...\n","core        WARNING \tCar position data is unavailable!\n","WARNING:fastf1.fastf1.core:Car position data is unavailable!\n","core        WARNING \tFailed to determine `Session.t0_date`!\n","WARNING:fastf1.fastf1.core:Failed to determine `Session.t0_date`!\n","req            INFO \tNo cached data found for weather_data. Loading data...\n","INFO:fastf1.fastf1.req:No cached data found for weather_data. Loading data...\n","_api           INFO \tFetching weather data...\n","INFO:fastf1.api:Fetching weather data...\n","logger      WARNING \tFailed to load weather data!\n","WARNING:fastf1.fastf1.core:Failed to load weather data!\n","DEBUG:fastf1.fastf1.core:Traceback for failure in weather data\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/logger.py\", line 152, in __wrapped\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/core.py\", line 2089, in _load_weather_data\n","    weather_data = api.weather_data(self.api_path, livedata=livedata)\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/req.py\", line 433, in _cached_api_request\n","    data = func(api_path, **func_kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/_api.py\", line 1583, in weather_data\n","    raise SessionNotAvailableError(\n","fastf1._api.SessionNotAvailableError: No data for this session! If this session only finished recently, please try again in a few minutes.\n","req            INFO \tNo cached data found for race_control_messages. Loading data...\n","INFO:fastf1.fastf1.req:No cached data found for race_control_messages. Loading data...\n","_api           INFO \tFetching race control messages...\n","INFO:fastf1.api:Fetching race control messages...\n","logger      WARNING \tFailed to load race control messages!\n","WARNING:fastf1.fastf1.core:Failed to load race control messages!\n","DEBUG:fastf1.fastf1.core:Traceback for failure in race control messages\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/logger.py\", line 152, in __wrapped\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/core.py\", line 2096, in _load_race_control_messages\n","    race_control_messages = api.race_control_messages(self.api_path,\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/req.py\", line 433, in _cached_api_request\n","    data = func(api_path, **func_kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/fastf1/_api.py\", line 1354, in race_control_messages\n","    raise SessionNotAvailableError(\n","fastf1._api.SessionNotAvailableError: No data for this session! If this session only finished recently, please try again in a few minutes.\n"]},{"output_type":"error","ename":"DataNotLoadedError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mDataNotLoadedError\u001b[0m                        Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-0d28352a011c>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mrace\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mff1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_session\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2023\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Qatar\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'S'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mrace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/fastf1/core.py\u001b[0m in \u001b[0;36mload\u001b[0;34m(self, laps, telemetry, weather, messages, livedata)\u001b[0m\n\u001b[1;32m   1275\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_calculate_quali_like_session_results\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1276\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1277\u001b[0;31m         _logger.info(f\"Finished loading data for {len(self.drivers)} \"\n\u001b[0m\u001b[1;32m   1278\u001b[0m                      f\"drivers: {self.drivers}\")\n\u001b[1;32m   1279\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/fastf1/core.py\u001b[0m in \u001b[0;36mdrivers\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1087\u001b[0m         \u001b[0mData\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mavailable\u001b[0m \u001b[0mafter\u001b[0m \u001b[0mcalling\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[0mSession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1088\u001b[0m         \"\"\"\n\u001b[0;32m-> 1089\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'DriverNumber'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1090\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1091\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/fastf1/core.py\u001b[0m in \u001b[0;36mresults\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1095\u001b[0m         \u001b[0mData\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mavailable\u001b[0m \u001b[0mafter\u001b[0m \u001b[0mcalling\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[0mSession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1096\u001b[0m         \"\"\"\n\u001b[0;32m-> 1097\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_property_warn_not_loaded\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'_results'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1098\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1099\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/fastf1/core.py\u001b[0m in \u001b[0;36m_get_property_warn_not_loaded\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   1064\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_property_warn_not_loaded\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1065\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1066\u001b[0;31m             raise DataNotLoadedError(\"The data you are trying to access has not \"\n\u001b[0m\u001b[1;32m   1067\u001b[0m                                      \"been loaded yet. See `Session.load`\")\n\u001b[1;32m   1068\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mDataNotLoadedError\u001b[0m: The data you are trying to access has not been loaded yet. See `Session.load`"]}]},{"cell_type":"markdown","source":["# Driver Pace Comparison"],"metadata":{"id":"0z9vvC6C9pF8"}},{"cell_type":"code","source":["# For races with mixed conditions, pick_wo_box() is better (return all laps which are NOT in laps or out laps)\n","laps = race.laps.pick_quicklaps()"],"metadata":{"id":"S2AxucIZ-AVO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# We convert the lap time column from timedelta to integer (this is a seaborn-specific modification), new column\n","transformed_laps = laps.copy()\n","transformed_laps.loc[:, \"LapTime (s)\"] = laps[\"LapTime\"].dt.total_seconds()\n","\n","# Order the driver from the fastest (lowest mean lap time) tp slower\n","driver_order = (transformed_laps[[\"Driver\", \"LapTime (s)\"]].groupby(\"Driver\").mean()[\"LapTime (s)\"].sort_values().index)\n","\n","# Make a color palette associating driver names to hex codes\n","driver_palette = {driver: ff1.plotting.driver_color(driver) for driver in driver_order}"],"metadata":{"id":"XVi_SIXf8l_8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Scatter boxplot\n","fig, ax = plt.subplots(figsize=(11, 7))\n","plt.title(f\"Drivers Pace (from fastest to slowest, by mean laptime)\\n\"\n","          f\"{race.event.year} {race.event['EventName']}\", size=14)\n","\n","sns.boxplot(data=transformed_laps, x=\"Driver\", y=\"LapTime (s)\", showmeans=True, meanline=True, meanprops={'color': 'black'},\n","            order=driver_order[:15], palette=driver_palette, flierprops={\"marker\": \".\", \"markerfacecolor\": \"black\", \"markeredgecolor\": \"black\"})\n","                            # [:] Change to plot just the ones with normal times\n","plt.text(0.80, 0.01,\"Box: 50% of the laptimes\\n\"\n","                    \"Horizontal solid line: median\\n\"\n","                    \"Horizontal dashed line: mean\\n\"\n","                    \"Whiskers: dispersion of values\\n\"\n","                    \"Dots: outlier laptimes\",\n","                    transform=ax.transAxes, fontsize=8, color='black', ha='left', va='bottom')\n","\n","ax.set(xlabel=None)\n","plt.tight_layout()\n","#plt.savefig(f\"/content/drive/MyDrive/F1/17.Qatar_(Losail)_23/Fotos/drivers_pace.png\", bbox_inches='tight', bbox_inches='tight', dpi=500)\n","plt.show()"],"metadata":{"id":"LoGunrog80ti"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Team Pace Comparison"],"metadata":{"id":"q-kq44hm6Rgl"}},{"cell_type":"code","source":["# Order the team from the fastest (lowest median lap time) to slower\n","team_order = (transformed_laps[[\"Team\", \"LapTime (s)\"]].groupby(\"Team\").mean()[\"LapTime (s)\"].sort_values().index)\n","\n","# Make a color palette associating team names to hex codes\n","team_palette = {team: ff1.plotting.team_color(team) for team in team_order}"],"metadata":{"id":"_5Bebj4C6UJJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Scatter boxplot\n","fig, ax = plt.subplots(figsize=(11, 7))\n","plt.title(f\"Teams Pace (from fastest to slowest, by mean laptime)\\n\"\n","          f\"{race.event.year} {race.event['EventName']}\", size=14)\n","\n","sns.boxplot(data=transformed_laps, x=\"Team\", y=\"LapTime (s)\", showmeans=True, meanline=True, meanprops={'color': 'black'},\n","            order=team_order, palette=team_palette, flierprops={\"marker\": \".\", \"markerfacecolor\": \"black\", \"markeredgecolor\": \"black\"})\n","\n","plt.text(0.80, 0.01,\"Box: 50% of the laptimes\\n\"\n","                    \"Horizontal solid line: median\\n\"\n","                    \"Horizontal dashed line: mean\\n\"\n","                    \"Whiskers: dispersion of values\\n\"\n","                    \"Dots: outlier laptimes\",\n","                    transform=ax.transAxes, fontsize=8, color='black', ha='left', va='bottom')\n","\n","ax.set(xlabel=None)\n","plt.xticks(rotation=35, ha='center')\n","plt.tight_layout()\n","#plt.savefig(f\"/content/drive/MyDrive/F1/17.Qatar_(Losail)_23/Fotos/teams_pace.png\", bbox_inches='tight', bbox_inches='tight', dpi=500)\n","plt.show()"],"metadata":{"id":"tFlq0xU69mTk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Track map with speed visualization and corners"],"metadata":{"id":"rbESZQBF_kfu"}},{"cell_type":"code","source":["lap = race.laps.pick_fastest()\n","tel = lap.get_telemetry()\n","pos = lap.get_pos_data()    # Black line\n","circuit_info = race.get_circuit_info()"],"metadata":{"id":"OoDQzkEr_pK_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Plotting the track shape and the corners"],"metadata":{"id":"Lzca6-yg_6D3"}},{"cell_type":"code","source":["        # For plotting the SPEED line:\n","# Where the car is at any moment in time ('x' n 'y' are columns in telemetry)\n","x = np.array(tel['X'].values)\n","y = np.array(tel['Y'].values)\n","\n","# Now, we create a set of line segments so that we can color them individually\n","points = np.array([x, y]).T.reshape(-1, 1, 2)\n","segments = np.concatenate([points[:-1], points[1:]], axis=1)\n","speed = tel['Speed'].to_numpy().astype(float)\n","\n","# Create a line collection (coloring the shape track). Set a segmented colormap and normalize the plot to integer values of colormap\n","color = lap.telemetry['Speed']\n","colormap = mpl.cm.inferno.reversed()\n","\n","lc = LineCollection(segments, norm=plt.Normalize(color.min(), color.max()), cmap=colormap, linewidth=4)\n","lc.set_array(speed)\n","\n","        # For plotting the BLACK line:\n","# By matrix multiplication of the rotation matrix with a vector [x, y], a new rotated vector [x_rot, y_rot] is obtained.\n","def rotate(xy, *, angle):\n","    rot_mat = np.array([[np.cos(angle), np.sin(angle)], [-np.sin(angle), np.cos(angle)]])\n","\n","    return np.matmul(xy, rot_mat)\n","\n","# Get the coordinates: an array of shape [n, 2] where n is the number of points and the second axis is x and y\n","track = pos.loc[:, ('X', 'Y')].to_numpy()\n","\n","'''=================================='''\n","\n","# Create a figure\n","fig, ax = plt.subplots(figsize=(8, 6), facecolor='gainsboro')\n","plt.title(f\"Fastest Lap - {lap['Driver']} - Speed Visualization (km/h) \\n\"\n","          f\"{race.event.year} {race.event['EventName']} {race.name}\", size=14)\n","\n","# Add a solid black line around the circuit\n","plt.plot(track[:, 0], track[:, 1], color='black', linewidth=8)\n","\n","# Add the LineCollection (speed lines) to the plot\n","ax.add_collection(lc)\n","\n","# CORNERS\n","# 1-Length of the space between number and track\n","offset_vector = [500, 0]\n","\n","# 2-Iterate over all corners\n","for _, corner in circuit_info.corners.iterrows():\n","    # Create a string from corner number and letter\n","    txt = f\"{corner['Number']}{corner['Letter']}\"\n","\n","    # Convert the angle from degrees to radian.\n","    offset_angle = corner['Angle'] / 180 * np.pi\n","\n","    # Rotate the offset vector so that it points sideways from the track.\n","    offset_x, offset_y = rotate(offset_vector, angle=offset_angle)\n","\n","    # Add the offset to the position of the corner\n","    text_x = corner['X'] + offset_x\n","    text_y = corner['Y'] + offset_y\n","\n","    # Finally, PRINT THE CORNER NUMBER.\n","    plt.text(text_x, text_y, txt, va='center_baseline', ha='center', size='medium', color='black')\n","\n","# Axes settings\n","plt.axis('equal')\n","plt.tick_params(labelleft=False, left=False, labelbottom=False, bottom=False)\n","plt.axis('off')\n","\n","# Finally, we create a color bar as a legend.\n","cbaxes = fig.add_axes([0.25, 0.05, 0.5, 0.05])\n","normlegend = mpl.colors.Normalize(vmin=color.min(), vmax=color.max())\n","legend = mpl.colorbar.ColorbarBase(cbaxes, norm=normlegend, cmap=colormap, orientation=\"horizontal\")\n","#plt.savefig(f\"/content/drive/MyDrive/F1/17.Qatar_(Losail)_23/Fotos/speed_track_race.png\", bbox_inches='tight', bbox_inches='tight', dpi=500)\n","plt.show()"],"metadata":{"id":"7MwJThbC_pHm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Track map with gear shifts and corners"],"metadata":{"id":"q02nlq7k91Qg"}},{"cell_type":"code","source":["# For plotting the GEAR line:\n","# Where the car is at any moment in time ('x' n 'y' are columns in telemetry)\n","x = np.array(tel['X'].values)\n","y = np.array(tel['Y'].values)\n","\n","# Create points, and with them, segments (converting it to the appropriate numpy data types)\n","points = np.array([x, y]).T.reshape(-1, 1, 2)\n","segments = np.concatenate([points[:-1], points[1:]], axis=1)\n","gear = tel['nGear'].to_numpy().astype(float)\n","\n","# Create a line collection (coloring the shape track). Set a segmented colormap and normalize the plot to integer values of colormap\n","colors = plt.get_cmap('Paired')\n","line_col = LineCollection(segments, norm=plt.Normalize(1, colors.N+1), cmap=colors, linewidth=4)\n","line_col.set_array(gear)\n","\n","        # For plotting the BLACK line:\n","# By matrix multiplication of the rotation matrix with a vector [x, y], a new rotated vector [x_rot, y_rot] is obtained.\n","def rotate(xy, *, angle):\n","    rot_mat = np.array([[np.cos(angle), np.sin(angle)], [-np.sin(angle), np.cos(angle)]])\n","\n","    return np.matmul(xy, rot_mat)\n","\n","# Get the coordinates: an array of shape [n, 2] where n is the number of points and the second axis is x and y\n","track = pos.loc[:, ('X', 'Y')].to_numpy()\n","\n","'''=================================='''\n","\n","# Create the plot\n","fig, ax = plt.subplots(figsize=(10, 6), facecolor='gainsboro')\n","plt.title(f\"Fastest Lap - {lap['Driver']} - Gear Shift Visualization\\n\"\n","          f\"{race.event.year} {race.event['EventName']} {race.name}\", size=14)\n","\n","# Add a solid black line around the circuit\n","plt.plot(track[:, 0], track[:, 1], color='black', linewidth=8)\n","\n","# Add the collection of lines (gear lines) to represent the circuit\n","ax.add_collection(line_col)\n","\n","# CORNERS\n","# 1-Length of the space between number and track\n","offset_vector = [500, 0]\n","\n","# 2-Iterate over all corners\n","for _, corner in circuit_info.corners.iterrows():\n","    # Create a string from corner number and letter\n","    txt = f\"{corner['Number']}{corner['Letter']}\"\n","\n","    # Convert the angle from degrees to radian.\n","    offset_angle = corner['Angle'] / 180 * np.pi\n","\n","    # Rotate the offset vector so that it points sideways from the track.\n","    offset_x, offset_y = rotate(offset_vector, angle=offset_angle)\n","\n","    # Add the offset to the position of the corner\n","    text_x = corner['X'] + offset_x\n","    text_y = corner['Y'] + offset_y\n","\n","    # Finally, PRINT THE CORNER NUMBER.\n","    plt.text(text_x, text_y, txt, va='center_baseline', ha='center', size='medium', color='black')\n","\n","# Axes settings\n","plt.axis('equal')\n","plt.tick_params(labelleft=False, left=False, labelbottom=False, bottom=False)\n","plt.axis('off')\n","\n","# Add a colorbar to the plot. Change orientation depending on the track\n","lateral_bar = plt.colorbar(mappable=line_col, label=\"Gear\", boundaries=np.arange(1, 10), orientation=\"vertical\")   #or horizontal\n","lateral_bar.set_ticks(np.arange(1.5, 9.5))\n","lateral_bar.set_ticklabels(np.arange(1, 9))\n","#plt.savefig(f\"/content/drive/MyDrive/F1/17.Qatar_(Losail)_23/Fotos/gear_track_race.png\", bbox_inches='tight', dpi=500)\n","plt.show()"],"metadata":{"id":"ojnP64Au_lN-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"14d3915b"},"source":["# Fastest Drivers in Each Sector"]},{"cell_type":"markdown","source":["https://github.com/edmundhong/formula1-dataanalysis/blob/main/Race%20Analysis.ipynb"],"metadata":{"id":"5gIL6yEtlipj"}},{"cell_type":"code","source":["# we pick only quick laps for this plot\n","df_quick = race.laps.pick_quicklaps()\n","\n","# load dataframe of df_quick (by Final Position in ascending order)\n","df_quick = df_quick.sort_values(by=['LapNumber','Position'], ascending=[False, True]).reset_index(drop=True)\n","\n","# fill in empty laptime records and convert to seconds\n","df_quick.LapTime = df_quick.LapTime.fillna(df_quick['Sector1Time']+df_quick['Sector2Time']+df_quick['Sector3Time'])\n","df_quick.LapTime = df_quick.LapTime.dt.total_seconds()\n","df_quick.Sector1Time = df_quick.Sector1Time.dt.total_seconds()\n","df_quick.Sector2Time = df_quick.Sector2Time.dt.total_seconds()\n","df_quick.Sector3Time = df_quick.Sector3Time.dt.total_seconds()\n","\n","# Get the top 10 fastest average(mean) SectorTime\n","# use median to counter mixed conditions (exp: dry+wet)\n","top_10_sector1 = df_quick.groupby(['Driver'])['Sector1Time'].mean().sort_values().head(10).reset_index()\n","top_10_sector2 = df_quick.groupby(['Driver'])['Sector2Time'].mean().sort_values().head(10).reset_index()\n","top_10_sector3 = df_quick.groupby(['Driver'])['Sector3Time'].mean().sort_values().head(10).reset_index()\n","\n","# for color palette\n","driver_color = {}\n","for index,lap in df_quick.iterrows():\n","    driver = lap['Driver']\n","    driver_color[driver] = ff1.plotting.driver_color(driver)"],"metadata":{"id":"p-mRjimaUsp6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Plot\n","fig, ax = plt.subplots(1,3, figsize=(14, 10))\n","fig.suptitle('Fastest Average Sector Time (Mean)\\n'+race.event.EventName, fontsize=15)\n","\n","# Sector 1\n","sns.barplot(x=top_10_sector1['Sector1Time'], y=top_10_sector1['Driver'], palette=driver_color, ax=ax[0], edgecolor='black')\n","ax[0].set_title('Sector 1', fontweight=\"bold\", fontstyle='italic')\n","ax[0].bar_label(ax[0].containers[0], padding=3)\n","ax[0].set_xlim(top_10_sector1.Sector1Time[0]-0.2,top_10_sector1.Sector1Time[0]+0.9)  # Cambiar segun diff, por estético\n","\n","# Sector 2\n","sns.barplot(x=top_10_sector2['Sector2Time'], y=top_10_sector2['Driver'], palette=driver_color, ax=ax[1], edgecolor='black')\n","ax[1].set_title('Sector 2', fontweight=\"bold\", fontstyle='italic')\n","ax[1].bar_label(ax[1].containers[0], padding=3)\n","ax[1].set_xlim(top_10_sector2.Sector2Time[0]-0.2,top_10_sector2.Sector2Time[0]+0.9)\n","\n","# Sector 3\n","sns.barplot(x=top_10_sector3['Sector3Time'], y=top_10_sector3['Driver'], palette=driver_color, ax=ax[2], edgecolor='black')\n","ax[2].set_title('Sector 3', fontweight=\"bold\", fontstyle='italic')\n","ax[2].bar_label(ax[2].containers[0], padding=3)\n","ax[2].set_xlim(top_10_sector3.Sector3Time[0]-0.2,top_10_sector3.Sector3Time[0]+0.4)\n","\n","#plt.savefig(f\"/content/drive/MyDrive/F1/17.Qatar_(Losail)_23/Fotos/fastest_sectors.png\", bbox_inches='tight', dpi=500)\n","plt.show()"],"metadata":{"id":"QGC9SdeaSAN8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Max and Min Speed of Each Team in Fastest Lap"],"metadata":{"id":"KLGIUN68g3Kw"}},{"cell_type":"code","source":["# Load again (if not, errors)\n","race.load()\n","\n","# Load laps\n","df = race.laps\n","\n","# Convert Times to seconds\n","df.LapTime = df.LapTime.dt.total_seconds()"],"metadata":{"id":"yifUJK0UbYzU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Speeds\n","team_max_speed = {}\n","team_min_speed = {}\n","\n","for team in set(df.Team):\n","    team_max_speed[team] = df.pick_team(team).pick_fastest().get_car_data().Speed.max()\n","    team_min_speed[team] = df.pick_team(team).pick_fastest().get_car_data().Speed.min()\n","\n","team_max_speed = pd.DataFrame(team_max_speed.items(), columns=['Team', 'Max Speed']).sort_values('Max Speed', ascending=False).reset_index()\n","team_min_speed = pd.DataFrame(team_min_speed.items(), columns=['Team', 'Min Speed']).sort_values('Min Speed', ascending=False).reset_index()\n","\n","\n","team_color = {}\n","for team in team_max_speed.Team:\n","    team_color[team] = ff1.plotting.team_color(team)"],"metadata":{"id":"FuqnZiUQM12I"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Plot max\n","fig, ax = plt.subplots(figsize=(10, 6))\n","fig.suptitle(f\"{race.name} - Teams Maximum Speed (Fastest Lap)\\n{race.event.year} {race.event.EventName}\", fontsize=15)\n","\n","# Max Speed\n","sns.barplot(data=team_max_speed, x='Team', y='Max Speed' , palette=team_color, ax=ax, edgecolor='black', lw=0.7)\n","ax.set_ylim(team_max_speed['Max Speed'].min()-10, team_max_speed['Max Speed'].max()+5)    # Cambiar hasta que mole representación\n","plt.xticks(rotation=45, ha='right')\n","\n","# Add speed\n","for i in range(len(team_max_speed)):\n","    ax.text(i, team_max_speed['Max Speed'][i]+0.2, team_max_speed['Max Speed'][i], ha = 'center', size = 11)\n","\n","plt.ylabel('Max Speed (km/h)')\n","plt.savefig(f\"/content/drive/MyDrive/F1/17.Qatar_(Losail)_23/Fotos/max_speed.png\", bbox_inches='tight', dpi=500)\n","plt.show()"],"metadata":{"id":"I3ZLxV2wM1ud"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Plot min\n","fig, ax = plt.subplots(figsize=(10, 6))\n","fig.suptitle(f\"{race.name} - Teams Minimum Speed (Fastest Lap)\\n{race.event.year} {race.event.EventName}\", fontsize=15)\n","\n","# Min Speed\n","sns.barplot(data=team_min_speed, x='Team', y='Min Speed' , palette=team_color, ax=ax, edgecolor='black', lw=0.7)\n","ax.set_ylim(team_min_speed['Min Speed'].min()-7, team_min_speed['Min Speed'].max()+5)\n","plt.xticks(rotation=45, ha='right')\n","\n","# Add speed\n","for i in range(len(team_min_speed)):\n","    ax.text(i, team_min_speed['Min Speed'][i]+0.2, team_min_speed['Min Speed'][i], ha = 'center', size = 11)\n","\n","plt.ylabel('Min Speed (km/h)')\n","plt.savefig(f\"/content/drive/MyDrive/F1/17.Qatar_(Losail)_23/Fotos/min_speed.png\", bbox_inches='tight', dpi=500)\n","plt.show()"],"metadata":{"id":"gc5crQTWjIuc"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Lap Time across Tyre Life (degradation)"],"metadata":{"id":"E29bAe6dS7aH"}},{"cell_type":"code","source":["# Problem: diff drivers with diff tyres, and diff laptimes, diff weights, so... not very representative\n","plt.figure(figsize=(13,6))\n","plt.title('Lap Time across Tyre Life (degradation) - '+race.event.EventName, fontsize=15)\n","\n","for compound in set(df_quick.Compound):\n","    exec(f\"average_laptime_per_tyrelife_{compound} = {{}}\")\n","    data_tyre = df_quick.pick_tyre(compound)\n","    for tyrelife in range(1,int(data_tyre.TyreLife.max())+1):\n","        exec(f\"average_laptime_per_tyrelife_{compound}[tyrelife] = data_tyre.loc[(df_quick['TyreLife'] == float(tyrelife)) & (df_quick['TrackStatus'] == '1'), ['LapTime']].mean()\")\n","    exec(f\"key = average_laptime_per_tyrelife_{compound}.keys()\")\n","    exec(f\"value = average_laptime_per_tyrelife_{compound}.values()\")\n","    color = ''+ff1.plotting.COMPOUND_COLORS[compound] if compound != 'HARD' else \"000000\"\n","    plt.plot(key, value, color=color, marker='.', label=compound)\n","\n","plt.ylabel('Lap Time (s)')\n","plt.xlabel('Tyre Laps')\n","plt.legend(title='Compound', framealpha=0.2)\n","#plt.savefig(f\"/content/drive/MyDrive/F1/17.Qatar_(Losail)_23/Fotos/tyre_life.png\", bbox_inches='tight', dpi=500)\n","plt.show()"],"metadata":{"id":"pCDiQ7GiVG65"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"558e13ef"},"source":["# Average Time Spent on Pit Stops (Team)"]},{"cell_type":"code","source":["# load race laps\n","df = race.laps\n","\n","# load dataframe of df (by Final Position in ascending order)\n","df = df.sort_values(by=['LapNumber','Position'], ascending=[False, True]).reset_index(drop=True)\n","\n","# fill in empty laptime records and convert to seconds\n","df.LapTime = df.LapTime.fillna(df['Sector1Time']+df['Sector2Time']+df['Sector3Time'])\n","df.LapTime = df.LapTime.dt.total_seconds()"],"metadata":{"id":"O6VKtzUugq3D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# extract pit enter and exit time (cuidado con != 0, probar si hay problema)\n","pitstop = df.loc[(df.LapNumber != 1.0) & (df.PitInTime.combine_first(df.PitOutTime).notnull()), ['Team','Driver','LapNumber','PitOutTime', 'PitInTime']].sort_values(by=['Team','Driver','LapNumber']).reset_index()\n","\n","# calculate time spent for each pit stop\n","pitstop['pittime'] = (pitstop.PitOutTime - pitstop.PitInTime.shift(1)).dt.total_seconds()\n","\n","# Mean for each team\n","pitstop_team_data = pitstop.groupby(['Team'])['pittime'].mean().sort_values().round(3)\n","\n","team_color = {}\n","for team in pitstop_team_data.index:\n","    team_color[team] = ff1.plotting.team_color(team)"],"metadata":{"id":"1PwLBx7afVWR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Plot\n","plt.figure(figsize=(13,6))\n","plt.title('Average Time Spent on Pit Stops - '+race.event.EventName, fontsize=15)\n","\n","sns.barplot(x=pitstop_team_data.index, y=pitstop_team_data.values, palette=team_color, edgecolor='black')\n","plt.ylabel('Time in Pit Stops (s)')\n","plt.xlabel('Team')\n","plt.ylim(15,45)    # cambiar entre min y max según preferencia (datos eje Y)\n","plt.xticks(rotation=15, ha='center')\n","\n","# Add time\n","for i, value in enumerate(pitstop_team_data.values):\n","    plt.annotate(f'{value:.3f}', (i, value + 0.5), ha='center', fontsize=11)\n","\n","#plt.savefig(f\"/content/drive/MyDrive/F1/17.Qatar_(Losail)_23/Fotos/average_pitstop.png\", bbox_inches='tight', dpi=500)\n","plt.show()"],"metadata":{"id":"29-R0Koj9l5J"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Total time in Pit Stops (Drivers)"],"metadata":{"id":"of4w4yAlB3GR"}},{"cell_type":"code","source":["driver_color = {}\n","for index,lap in df.iterrows():\n","    driver = lap['Driver']\n","    driver_color[driver] = ff1.plotting.driver_color(driver)\n","\n","# Total time for each driver\n","pitstop_driver_data = pitstop.groupby(['Driver'])['pittime'].sum().sort_values().round(3)\n","\n","# Plot\n","plt.figure(figsize=(13,6))\n","plt.title(\"Total Time Spent on Pit Stops - \"+race.event.EventName, fontsize=15)\n","sns.barplot(x=pitstop_driver_data.index, y=pitstop_driver_data.values, palette=driver_color, edgecolor='black')\n","plt.ylabel('Time in Pit Stops (s)')\n","plt.xlabel('Team')\n","plt.ylim(0, 80)    # cambiar entre min y max según preferencia (datos eje Y)\n","\n","# Add time\n","for i, value in enumerate(pitstop_driver_data.values):\n","    plt.annotate(f'{value:.2f}', (i, value + 1.0), ha='center', fontsize=10)\n","\n","#plt.savefig(f\"/content/drive/MyDrive/F1/17.Qatar_(Losail)_23/Fotos/total_pitstop.png\", bbox_inches='tight', dpi=500)\n","plt.show()"],"metadata":{"id":"a2LFN_wcBwL7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Tyre strategies during a race"],"metadata":{"id":"DtQ3hA1hBJUj"}},{"cell_type":"code","source":["# Enabling misc_mpl_mods will turn on minor grid lines that clutters the plot\n","ff1.plotting.setup_mpl(mpl_timedelta_support=False, misc_mpl_mods=False)"],"metadata":{"id":"C5OXPu3qGogX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# We want all, not just quick laps\n","laps = race.laps\n","drivers = race.drivers\n","\n","# Drivers abbreviations\n","drivers = [race.get_driver(driver)[\"Abbreviation\"] for driver in drivers]\n","\n","# Stint length and compound used for every stint by every driver.\n","stints = laps[[\"Driver\", \"Stint\", \"Compound\", \"LapNumber\", \"FreshTyre\"]]\n","stints = stints.groupby([\"Driver\", \"Stint\", \"Compound\", \"FreshTyre\"])\n","stints = stints.count().reset_index()\n","\n","# The number in the LapNumber column now means the stint length.\n","stints = stints.rename(columns={\"LapNumber\": \"StintLength\"})"],"metadata":{"id":"wglrTONtBLAK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Now we can plot the strategies for each driver\n","fig, ax = plt.subplots(figsize=(12, 7))\n","plt.title(f\"{race.event.year} {race.event.EventName} - Tyre Strategies\")\n","sns.set(style=\"dark\")\n","\n","# Bars configuration\n","for i, driver in enumerate(drivers):\n","    driver_stints = stints.loc[stints[\"Driver\"] == driver]\n","\n","    previous_stint_end = 0\n","    for idx, row in driver_stints.iterrows():\n","        comp_color = ff1.plotting.COMPOUND_COLORS[row[\"Compound\"]]\n","        plt.barh(y=i, width=row[\"StintLength\"], left=previous_stint_end, color=comp_color, edgecolor=\"black\", fill=True, linewidth=1.3,\n","                 alpha = 0.8 if not row.FreshTyre else 1, hatch = '/' if not row.FreshTyre else None)\n","\n","        # Add 'laps' in first bar\n","        label = str(row[\"StintLength\"])\n","        if i == 0:\n","            label = f\"{label} laps\"\n","        plt.text(previous_stint_end + row[\"StintLength\"] / 2, i, label, ha='right', va='center', fontsize=10, color='black')\n","        previous_stint_end += row[\"StintLength\"]\n","\n","# Axes settings\n","plt.yticks(range(len(drivers)), drivers)\n","plt.xlabel(\"Lap Number\")\n","plt.ylabel(\"Drivers\")    # Hasta que no pasa un rato, no sale posición final\n","plt.grid(False)\n","ax.invert_yaxis()\n","\n","#plt.savefig(f\"/content/drive/MyDrive/F1/17.Qatar_(Losail)_23/Fotos/tyre_strategies.png\", bbox_inches='tight', dpi=500)\n","plt.show()"],"metadata":{"id":"HvcRdLJMJnGA"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Drivers Laptimes Distribution (Violin) + Compound"],"metadata":{"id":"WL5zUZh_BK6v"}},{"cell_type":"code","source":["# enabling misc_mpl_mods will turn on minor grid lines that clutters the plot\n","ff1.plotting.setup_mpl(mpl_timedelta_support=False, misc_mpl_mods=False)"],"metadata":{"id":"8kgvcyT39xAp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Get all the laps for the point finishers only and filter out slow laps\n","point_finishers = race.drivers[:10]\n","driver_laps = race.laps.pick_drivers(point_finishers).pick_quicklaps().reset_index()\n","\n","# Get abbreviations in the finishing order.\n","finishing_order = [race.get_driver(i)[\"Abbreviation\"] for i in point_finishers]\n","\n","# We need to modify the palette. Its keys are the driver's full names but we need the keys to be the drivers'abbreviations.\n","driver_colors = {abv: ff1.plotting.DRIVER_COLORS[driver] for abv,\n","                 driver in ff1.plotting.DRIVER_TRANSLATE.items()}"],"metadata":{"id":"tC38py9uBXYr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fig, ax = plt.subplots(figsize=(10, 5))\n","plt.suptitle(f' Lap Time Distributions (Top 10) - {race.event.year} {race.event.EventName} {race.name}', size=14)\n","\n","# Seaborn doesn't have proper timedelta support so we have to convert timedelta to float (in seconds)\n","driver_laps[\"LapTime(s)\"] = driver_laps[\"LapTime\"].dt.total_seconds()\n","\n","# Violin plots to show the distributions\n","sns.violinplot(data=driver_laps, x=\"Driver\", y=\"LapTime(s)\", inner=None, scale=\"area\", order=finishing_order, palette=driver_colors)\n","\n","# Swarm plot to show the actual laptimes\n","sns.swarmplot(data=driver_laps, x=\"Driver\", y=\"LapTime(s)\", order=finishing_order, hue=\"Compound\",\n","              palette=ff1.plotting.COMPOUND_COLORS, hue_order=[\"SOFT\", \"MEDIUM\", \"HARD\"], linewidth=0.5, size=5)\n","\n","ax.set_ylabel(\"LapTime (s)\")\n","ax.set_xlabel(\"Driver (starting position)\")\n","ax.legend(loc=\"lower right\")\n","sns.despine(left=True, bottom=True)\n","plt.grid(False)\n","plt.tight_layout()\n","#plt.savefig(f\"/content/drive/MyDrive/F1/17.Qatar_(Losail)_23/Fotos/laptimes_distribution_violin.png\", bbox_inches='tight', dpi=500)\n","plt.show()"],"metadata":{"id":"uDdo7tX5BXHA"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Drivers Laptimes Scatterplot + Compound"],"metadata":{"id":"vDF0wwPAB08P"}},{"cell_type":"code","source":["# The misc_mpl_mods option enables minor grid lines which clutter the plot\n","ff1.plotting.setup_mpl(misc_mpl_mods=True)"],"metadata":{"id":"7Bbw0-Y4B2Lc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Get laps for a single driver and filter out slow laps as they distort the graph axis.\n","driver = 'VER'\n","driver_laps = race.laps.pick_driver(driver).pick_quicklaps().reset_index()"],"metadata":{"id":"-pcChs0IEDik"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Plot\n","fig, ax = plt.subplots(figsize=(8, 7))\n","plt.suptitle(f'{driver} Laptimes in {race.name} - {race.event.year} {race.event.EventName}', size=14)\n","\n","sns.scatterplot(data=driver_laps, x=\"LapNumber\", y=\"LapTime\", ax=ax, hue=\"Compound\",\n","                palette=ff1.plotting.COMPOUND_COLORS, s=70, linewidth=0, legend='auto')\n","\n","ax.set_xlabel(\"Lap Number\")\n","ax.set_ylabel(\"LapTime (min:sec)\")\n","ax.invert_yaxis()\n","\n","sns.despine(left=True, bottom=True)\n","\n","plt.tight_layout()\n","#plt.savefig(f\"/content/drive/MyDrive/F1/17.Qatar_(Losail)_23/Fotos/laptimes_scatterplot.png\", bbox_inches='tight', dpi=500)\n","plt.show()"],"metadata":{"id":"Ux2GuXM2qlEV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Two drivers and differentiating compounds by colors"],"metadata":{"id":"NwW74S356ue_"}},{"cell_type":"code","source":["# Driver info and colors\n","driver1 = 'SAI'\n","driver2 = 'HAM'\n","driver1_laps = race.laps.pick_driver(driver1).pick_quicklaps().reset_index()\n","driver2_laps = race.laps.pick_driver(driver2).pick_quicklaps().reset_index()\n","colors1 = [\"salmon\", \"gainsboro\"]  #M / H\n","colors2 = [\"yellowgreen\", \"royalblue\"]\n","\n","\n","# Plot\n","fig, ax = plt.subplots(figsize=(8, 7))\n","plt.suptitle(f'{driver1} vs {driver2} Laptimes in {race.name} - {race.event.year} {race.event.EventName}', size=14)\n","\n","sns.scatterplot(data=driver1_laps, x=\"LapNumber\", y=\"LapTime\", ax=ax, hue=\"Compound\",\n","                palette=colors1, s=70, linewidth=0, label=driver1)\n","\n","sns.scatterplot(data=driver2_laps, x=\"LapNumber\", y=\"LapTime\", ax=ax, hue=\"Compound\",\n","                palette=colors2, s=70, linewidth=0, label=driver2)\n","\n","ax.set_xlabel(\"Lap Number\")\n","ax.set_ylabel(\"LapTime (min:sec)\")\n","ax.invert_yaxis()\n","\n","sns.despine(left=True, bottom=True)\n","\n","plt.tight_layout()\n","#plt.savefig(f\"/content/drive/MyDrive/F1/17.Qatar_(Losail)_23/Fotos/laptimes_doble_scatterplot.png\", bbox_inches='tight', dpi=500)\n","plt.show()"],"metadata":{"id":"qXAgKpXP6sP5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Podium drivers and no compound difference"],"metadata":{"id":"k9XxowQZ6071"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"lxz1IGHeICXQ"},"outputs":[],"source":["# Get all the Top 3 drivers laps, filter out slow laps, colors.\n","point_finishers = race.drivers[:3]\n","driver_laps = race.laps.pick_drivers(point_finishers).pick_quicklaps().reset_index()\n","custom_colors = [\"royalblue\", \"violet\", \"yellowgreen\"]      # https://matplotlib.org/stable/gallery/color/named_colors.html\n","\n","\n","# Plot\n","fig, ax = plt.subplots(figsize=(8, 7))\n","plt.suptitle(f'Top 3 Driver Laptimes in {race.name} - {race.event.year} {race.event.EventName}', size=14)\n","\n","sns.scatterplot(data=driver_laps, x=\"LapNumber\", y=\"LapTime\", ax=ax, hue=\"Driver\",\n","                palette=custom_colors, s=70, linewidth=0, legend='auto')\n","\n","ax.set_xlabel(\"Lap Number\")\n","ax.set_ylabel(\"LapTime (min:sec)\")\n","ax.invert_yaxis()\n","\n","sns.despine(left=True, bottom=True)\n","\n","plt.tight_layout()\n","#plt.savefig(f\"/content/drive/MyDrive/F1/17.Qatar_(Losail)_23/Fotos/laptimes_triple_scatterplot.png\", bbox_inches='tight', dpi=500)\n","plt.show()"]},{"cell_type":"markdown","source":["# Lap time diff || Track Dominance (minisectors) || Telemetry (delta time)"],"metadata":{"id":"Dii0X8BRuVNI"}},{"cell_type":"markdown","source":["### ***2º: Select the data***\n","\n","\n"],"metadata":{"id":"nK3fnmWcxbEy"}},{"cell_type":"code","source":["# Setup plotting (reset plot settings, now dark background)\n","plotting.setup_mpl()\n","\n","# Load again (if not, errors)\n","session = race\n","session.load()"],"metadata":{"id":"pUYDefjuvBqq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Get the race laps\n","laps = session.laps\n","\n","# Choose the drivers to be studied\n","driver1 = 'SAI'\n","driver2 = 'RUS'\n","\n","# Select the laps from both drivers\n","laps_driver1 = laps.pick_driver(driver1)\n","laps_driver2 = laps.pick_driver(driver2)\n","\n","# Select the fastest lap\n","fastest_driver1 = laps_driver1.pick_fastest()\n","fastest_driver2 = laps_driver2.pick_fastest()\n","\n","# Get fastest quali lap telemetry (.get_car_data doesn't work, we need the 'X' and 'Y' columns from .get_telemetry)\n","fastest_lap_driver1 = fastest_driver1.get_telemetry().add_distance()\n","fastest_lap_driver2 = fastest_driver2.get_telemetry().add_distance()\n","\n","# New column that indicates the driver\n","fastest_lap_driver1['Driver'] = driver1\n","fastest_lap_driver2['Driver'] = driver2\n","\n","# Merge both lap telemetries\n","telemetry = fastest_lap_driver1.append(fastest_lap_driver2)"],"metadata":{"id":"fA64LF89vBnn"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### **Some information about the race:**"],"metadata":{"id":"wD3ODUiv7607"}},{"cell_type":"code","source":["# Fastest lap of each driver\n","print(f\"Fastest lap of {driver1}: {fastest_driver1['LapTime']}\")\n","print(f\"Fastest lap of {driver2}: {fastest_driver2['LapTime']}\")"],"metadata":{"id":"ESNkBh5C6iOB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Info about the fastest race lap\n","fastest_lap = laps.pick_fastest()\n","\n","print('Fastest lap: ', fastest_lap['LapTime'])\n","print('Fastest lap on lap number', fastest_lap['LapNumber'])\n","print(f\"Tyre compound: {fastest_lap['Compound']}, with {fastest_lap['TyreLife']} laps of use\")\n","print('Driver: ', fastest_lap['Driver'])"],"metadata":{"id":"spZYH_2l6trH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Fastest sectors\n","df = pd.DataFrame(laps)\n","\n","# Look for the minimum value of that column\n","min_sector1 = df['Sector1Time'].idxmin()\n","min_sector2 = df['Sector2Time'].idxmin()\n","min_sector3 = df['Sector3Time'].idxmin()\n","\n","# Info about the row containing the minimum value\n","sector1_data = df.loc[min_sector1]\n","sector2_data = df.loc[min_sector2]\n","sector3_data = df.loc[min_sector3]\n","\n","print(f\"The fastest Sector 1 is {sector1_data['Sector1Time']} seconds, driver: {sector1_data['Driver']}.\")\n","print(f\"The fastest Sector 2 is {sector2_data['Sector2Time']} seconds, driver: {sector2_data['Driver']}.\")\n","print(f\"The fastest Sector 3 is {sector3_data['Sector3Time']} seconds, driver: {sector3_data['Driver']}.\")"],"metadata":{"id":"g8aVSyjH6xwX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### ***Plot: Lap times during the race***"],"metadata":{"id":"xxkHKGus1hEr"}},{"cell_type":"code","source":["driver1_color = ff1.plotting.driver_color(driver1)\n","driver2_color = ff1.plotting.driver_color(driver2)\n","\n","# We remove slow laps to avoid distorting the results\n","quicks_laps_driver1 = laps.pick_driver(driver1).pick_quicklaps()\n","quicks_laps_driver2 = laps.pick_driver(driver2).pick_quicklaps()"],"metadata":{"id":"nV3qrcJA4LoL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Lap time analysis of both drivers during the race\n","fig, ax = plt.subplots(figsize=(12,5))\n","\n","fig.suptitle(f\"Lap times during the race - {driver1} vs {driver2} - {session.event.year} {session.event.EventName}\")\n","\n","ax.plot(quicks_laps_driver1['LapNumber'], quicks_laps_driver1['LapTime'], label=driver1, color=driver1_color)\n","ax.plot(quicks_laps_driver2['LapNumber'], quicks_laps_driver2['LapTime'], label=driver2, color=driver2_color)\n","\n","plt.text(0.72, 0.92, \"Laptimes can be adjusted, because we \\neliminate slow laps (e.g. laps with SC or VSC)\",\n","         transform=ax.transAxes, fontsize=8, color='white', ha='left', va='bottom')\n","\n","ax.set(ylabel='Laptime (min:sec)', xlabel='Lap')\n","ax.legend(loc=\"upper center\")\n","\n","#plt.savefig(f\"/content/drive/MyDrive/F1/17.Qatar_(Losail)_23/Fotos/race_laptimes.png\", bbox_inches='tight', dpi=500)\n","\n","plt.show()"],"metadata":{"id":"YkT8Ve2v1Y0W"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### ***Plot: Minisectors dominance***"],"metadata":{"id":"HiDl07K3x8SS"}},{"cell_type":"markdown","source":["Cuidado: coge las dos vueltas mas rapidas, no coincidentes. Para comparar pelea por vuelta rápida vale."],"metadata":{"id":"gi307fLquorH"}},{"cell_type":"code","source":["# Number of minisectors of equal size (you can change it)\n","num_minisectors = 25\n","\n","# Track distance\n","total_distance = max(telemetry['Distance'])\n","\n","# Generate =sized minisectors\n","minisector_length = total_distance / num_minisectors\n","\n","# Create a minisector column (assign every row a minisector depending on the current distance) - then we merge based on this column\n","telemetry['Minisector'] = (telemetry['Distance'] // minisector_length + 1)\n","\n","# New DF: we calculate avg. speed per driver per minisector\n","average_speed = telemetry.groupby(['Minisector', 'Driver'])['Speed'].mean().reset_index()\n","\n","# Select the driver with the highest average speed (.loc extracts the rows)\n","fastest_driver = average_speed.loc[average_speed.groupby(['Minisector'])['Speed'].idxmax()]\n","\n","# Delete speed column and rename the driver one\n","fastest_driver = fastest_driver[['Minisector', 'Driver']]\n","fastest_driver = fastest_driver.rename(columns={'Driver': 'Fastest_driver'})\n","\n","# Combine 2 DF: telemetry (main) with fastest_driver per minisector (based on minisector column, every minisector repeated, = driver)\n","telemetry = telemetry.merge(fastest_driver, on=['Minisector'])\n","\n","# Order the data by distance\n","telemetry = telemetry.sort_values(by=['Distance'])\n","\n","# New column: convert driver name to integer (if fastest = VER -> 1)\n","telemetry.loc[telemetry['Fastest_driver'] == driver1, 'Fastest_driver_int'] = 1\n","telemetry.loc[telemetry['Fastest_driver'] == driver2, 'Fastest_driver_int'] = 2"],"metadata":{"id":"Dm-YPcLpqKZF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["        # For plotting the DOMINANCE line:\n","# Where the car is at any moment in time ('x' n 'y' are columns in telemetry)\n","x = np.array(telemetry['X'].values)\n","y = np.array(telemetry['Y'].values)\n","\n","# Create points, and with them, segments (converting it to the appropriate numpy data types)\n","points = np.array([x, y]).T.reshape(-1, 1, 2)\n","segments = np.concatenate([points[:-1], points[1:]], axis=1)\n","fastest_driver_array = telemetry['Fastest_driver_int'].to_numpy().astype(float)\n","\n","# Coloring the plot (more colors: https://matplotlib.org/stable/tutorials/colors/colormaps.html)\n","colors = plt.get_cmap('brg', 2)\n","line_col = LineCollection(segments, norm=plt.Normalize(1, colors.N+1), cmap=colors, linewidth=4)   # line coordinates| map value-colors | colors\n","line_col.set_array(fastest_driver_array)                                                           # plot colors according to the fastest driver\n","\n","        # For plotting the BLACK line:\n","laps = session.laps.pick_fastest()\n","pos = laps.get_pos_data()\n","circuit_info = session.get_circuit_info()\n","\n","# By matrix multiplication of the rotation matrix with a vector [x, y], a new rotated vector [x_rot, y_rot] is obtained.\n","def rotate(xy, *, angle):\n","    rot_mat = np.array([[np.cos(angle), np.sin(angle)], [-np.sin(angle), np.cos(angle)]])\n","\n","    return np.matmul(xy, rot_mat)\n","\n","# Get the coordinates: an array of shape [n, 2] where n is the number of points and the second axis is x and y\n","track = pos.loc[:, ('X', 'Y')].to_numpy()\n","\n","'''=================================='''\n","\n","# Create the plot (circuit shape)\n","plt.figure(figsize=(9, 8))\n","plt.title(f'Track dominance - {session.name}\\n'\n","          f'{driver1} vs {driver2} - {session.event.year} {session.event.EventName}', size=14)\n","\n","# Add a solid black line around the circuit\n","plt.plot(track[:, 0], track[:, 1], color='black', linewidth=8)\n","\n","# Add the collection of lines (dominance) to represent the circuit\n","plt.gca().add_collection(line_col)\n","\n","# CORNERS\n","# 1-Length of the space between number and track\n","offset_vector = [500, 0]\n","\n","# 2-Iterate over all corners\n","for _, corner in circuit_info.corners.iterrows():\n","    # Create a string from corner number and letter\n","    txt = f\"{corner['Number']}{corner['Letter']}\"\n","\n","    # Convert the angle from degrees to radian.\n","    offset_angle = corner['Angle'] / 180 * np.pi\n","\n","    # Rotate the offset vector so that it points sideways from the track.\n","    offset_x, offset_y = rotate(offset_vector, angle=offset_angle)\n","\n","    # Add the offset to the position of the corner\n","    text_x = corner['X'] + offset_x\n","    text_y = corner['Y'] + offset_y\n","\n","    # Finally, PRINT THE CORNER NUMBER.\n","    plt.text(text_x, text_y, txt, va='center_baseline', ha='center', size='medium', color='white')\n","\n","# Axes settings\n","plt.axis('equal')\n","plt.tick_params(labelleft=False, left=False, labelbottom=False, bottom=False)\n","plt.axis('off')\n","\n","# Add a lateral colorbar to the plot (legend)\n","lateral_bar = plt.colorbar(mappable=line_col, boundaries=np.arange(1,4), shrink=0.6, orientation='horizontal')   # data origin (fastest driver) | legend limits\n","lateral_bar.ax.set_position([0.2, 0.32, 0.6, 0.02])  # [left, bottom, width, height]\n","lateral_bar.set_ticks(np.arange(1.5, 3.5))                                        # where the driver-marks are\n","lateral_bar.set_ticklabels([driver1, driver2])\n","\n","#plt.savefig(f\"/content/drive/MyDrive/F1/17.Qatar_(Losail)_23/Fotos/minisector_doble_dominance.png\", bbox_inches='tight', dpi=500)\n","\n","plt.show()"],"metadata":{"id":"k2Hw014jzhbw"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### ***Plot: Telemetry***"],"metadata":{"id":"yu5TWnkkyUxb"}},{"cell_type":"markdown","source":["**Time delta**\n","\n","Use with caution: this delta is an estimation, and not too accurate. So, it doesn't represent the real gap during the whole lap, but it shows us where a driver gained or lost time compared to another (plotted together with 'speed')."],"metadata":{"id":"NliAFtjFwQYi"}},{"cell_type":"code","source":["delta_time, ref_tel, compare_tel = utils.delta_time(fastest_driver1, fastest_driver2)"],"metadata":{"id":"VQFFcdcdv3UW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# RACE: Get lap XX telemetry data\n","lap_analyze = 50\n","lap_telemetry_driver1 = laps_driver1.loc[laps_driver1['LapNumber']==lap_analyze].get_car_data().add_distance()\n","lap_telemetry_driver2 = laps_driver2.loc[laps_driver2['LapNumber']==lap_analyze].get_car_data().add_distance()"],"metadata":{"id":"zWMjq9w6yUlW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["driver1_color = ff1.plotting.driver_color(driver1)\n","driver2_color = ff1.plotting.driver_color(driver2)"],"metadata":{"id":"IJBHiRfOycTk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Create the plot\n","fig, ax = plt.subplots(5, figsize=(14,15), gridspec_kw={'height_ratios': [2, 0.8, 1, 0.8, 0.8]})\n","\n","ax[0].title.set_text(f\"Lap {lap_analyze} Telemetry, {driver1} vs {driver2} - {session.event.year} {session.event.EventName}\\n\")   # Here in [0], to be closer to the plot\n","\n","# Speed\n","ax[0].plot(lap_telemetry_driver1['Distance'], lap_telemetry_driver1['Speed'], label=driver1, color=driver1_color)\n","ax[0].plot(lap_telemetry_driver2['Distance'], lap_telemetry_driver2['Speed'], label=driver2, color=driver2_color)\n","ax[0].set_ylabel('Speed (km/h)', fontsize=13)\n","ax[0].legend(loc=\"upper center\")\n","\n","# Delta\n","twin = ax[0].twinx()   # right scale\n","twin.plot(ref_tel['Distance'], delta_time, '--', color='white')\n","twin.set_ylabel(f\"<-- {driver2} ahead | {driver1} ahead (s)-->\", size=15)\n","\n","# Maximum and Minimum speed of drivers\n","driver1_max_speed = lap_telemetry_driver1['Speed'].max()\n","driver1_min_speed = lap_telemetry_driver1['Speed'].min()\n","driver2_max_speed = lap_telemetry_driver2['Speed'].max()\n","driver2_min_speed = lap_telemetry_driver2['Speed'].min()\n","ax[0].annotate(f'{driver1}: {driver1_max_speed} km/h', (lap_telemetry_driver1['Distance'][lap_telemetry_driver1['Speed'].idxmax()], driver1_max_speed), textcoords=\"offset points\", xytext=(0, 0), ha='left', color='white')   #valores x,y | posición texto\n","ax[0].annotate(f'{driver1}: {driver1_min_speed} km/h', (lap_telemetry_driver1['Distance'][lap_telemetry_driver1['Speed'].idxmin()], driver1_min_speed), textcoords=\"offset points\", xytext=(0, 0), ha='left', color='white')\n","ax[0].annotate(f'{driver2}: {driver2_max_speed} km/h', (lap_telemetry_driver2['Distance'][lap_telemetry_driver2['Speed'].idxmax()], driver2_max_speed), textcoords=\"offset points\", xytext=(0, 10), ha='left', color='white')\n","ax[0].annotate(f'{driver2}: {driver2_min_speed} km/h', (lap_telemetry_driver2['Distance'][lap_telemetry_driver2['Speed'].idxmin()], driver2_min_speed), textcoords=\"offset points\", xytext=(0, -10), ha='left', color='white')\n","\n","# Gear\n","ax[1].plot(lap_telemetry_driver1['Distance'], lap_telemetry_driver1['nGear'], label=driver1, color=driver1_color)\n","ax[1].plot(lap_telemetry_driver2['Distance'], lap_telemetry_driver2['nGear'], label=driver2, color=driver2_color)\n","ax[1].set_ylabel('Gear', fontsize=13)\n","\n","# Throttle\n","ax[2].plot(lap_telemetry_driver1['Distance'], lap_telemetry_driver1['Throttle'], label=driver1, color=driver1_color)\n","ax[2].plot(lap_telemetry_driver2['Distance'], lap_telemetry_driver2['Throttle'], label=driver2, color=driver2_color)\n","ax[2].set_ylabel('Throttle (%)', fontsize=13)\n","\n","# Brake\n","ax[3].plot(lap_telemetry_driver1['Distance'], lap_telemetry_driver1['Brake'], label=driver1, color=driver1_color)\n","ax[3].plot(lap_telemetry_driver2['Distance'], lap_telemetry_driver2['Brake'], label=driver2, color=driver2_color)\n","ax[3].set_ylabel('Off - Brakes - On', fontsize=13)\n","\n","# DRS\n","ax[4].plot(lap_telemetry_driver1['Distance'], lap_telemetry_driver1['DRS'], label=driver1, color=driver1_color)\n","ax[4].plot(lap_telemetry_driver2['Distance'], lap_telemetry_driver2['DRS'], label=driver2, color=driver2_color)\n","ax[4].set_ylabel('Off - DRS - On', fontsize=13)\n","ax[4].set(xlabel='Lap distance (m)')\n","\n","# Hide axis labels on subplots that are not on the outer edges\n","for a in ax.flat:\n","    a.label_outer()\n","\n","# No space in the sides\n","for i in range(5):\n","    ax[i].set_xlim(0, max(lap_telemetry_driver1['Distance']))\n","\n","#plt.savefig(f\"/content/drive/MyDrive/F1/17.Qatar_(Losail)_23/Fotos/full_telemetry.png\", bbox_inches='tight', dpi=500)\n","\n","plt.show()"],"metadata":{"id":"-EFjS8XDycQU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Lap time diff (stint n mean) || Telemetry (distance n delta)\n","Difference: analyze with 'driver ahead'"],"metadata":{"id":"X9Qe60Rp3g7A"}},{"cell_type":"markdown","source":["### ***2º: Select the data***"],"metadata":{"id":"KWsKNFDp4YKv"}},{"cell_type":"code","source":["laps = session.laps\n","\n","# Here we change the drivers, we need 2 that were together in race (and in the 'stint' if we code it)\n","driver1 = 'SAI'\n","driver2 = 'LEC'\n","\n","# Get the laps info of the drivers (delete slow laps)\n","laps_driver1 = laps.pick_driver(driver1).pick_quicklaps()\n","laps_driver2 = laps.pick_driver(driver2).pick_quicklaps()\n","\n","# Optional, or change stint... depends, but keep in mind that we need 2 drivers that were together in race\n","# If we only want to analyze stint 1 (until first pitstop) - pitstop can distort plots\n","laps_driver1 = laps_driver1.loc[laps_driver1['Stint'] == 1]\n","laps_driver2 = laps_driver2.loc[laps_driver2['Stint'] == 1]\n","\n","# Create a DataFrame of all the distances between 2 drivers at any moment during any lap (comparing lap by lap)\n","full_distance_driver1_driver2 = pd.DataFrame()\n","\n","# DF of the average distance per lap\n","average_distance_driver1_driver2 = pd.DataFrame()"],"metadata":{"id":"LTva0xSWpg1H"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Iterate the rows (laps) of a DataFrame in a loop, providing access to each row one by one\n","for lap in laps_driver2.iterlaps():\n","    telemetry = lap[1].get_car_data().add_distance().add_driver_ahead()     # 1-load telemetry /2-add column of m driven /3-add col of driver_ahead y distance_...\n","\n","    # This loop only runs when driver1 (SAI) is ahead, and driver2 (LEC) right behind (just this fight); otherwise we compare wrong distance gaps\n","    telemetry = telemetry.loc[telemetry['DriverAhead'] == \"55\"]\n","\n","    if len(telemetry) != 0:    # Check that the box is not empty. If it is, 1st is no longer in front of it and is no longer of interest.\n","        lap_telemetry = telemetry[['Distance', 'DistanceToDriverAhead']]    # Select the columns we want to know (the two added before)\n","        lap_telemetry.loc[:, 'Lap'] = lap[0] -247   # (248-247)             # ** We subtract the necessary laps to start at 1 (Problem: Laps don't start at 1 and data is not displayed)\n","\n","        full_distance_driver1_driver2 = full_distance_driver1_driver2.append(lap_telemetry)   # Add lap_telemetry rows to the dataframe\n","\n","        # Average / median distance (ignore NaN values, ex: pitstops)\n","        distance_mean = np.nanmean(telemetry['DistanceToDriverAhead'])\n","        distance_median = np.nanmedian(telemetry['DistanceToDriverAhead'])\n","\n","        # New columns to the dataframe: distances between pilots at a specific moment in time\n","        average_distance_driver1_driver2 = average_distance_driver1_driver2.append({\n","            'Lap': lap[0] -247,   # ** We subtract the necessary laps to start at 1 (Problem: Laps don't start at 1 and data is not displayed)\n","            'Mean': distance_mean,\n","            'Median': distance_median},\n","            ignore_index = True)"],"metadata":{"id":"schsj8RzXIbE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### ***Plot: Lap time diff***"],"metadata":{"id":"XuN9LVTW4rF_"}},{"cell_type":"code","source":["driver1_color = ff1.plotting.driver_color(driver1)\n","driver2_color = ff1.plotting.driver_color(driver2)"],"metadata":{"id":"KEWvzwPS4hob"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fig, ax = plt.subplots(figsize=(10,4))\n","fig.suptitle(f\"{driver1} vs {driver2} opening stint comparison (Laptimes)\")\n","\n","# Lap times (minutes) during the opening stint\n","ax.plot(laps_driver1['LapNumber'], laps_driver1['LapTime'], label=driver1, color=driver1_color)\n","ax.plot(laps_driver2['LapNumber'], laps_driver2['LapTime'], label=driver2, color=driver2_color)\n","\n","plt.text(0.66, 0.92, \"Laptimes can be adjusted, because we \\neliminate slow laps (e.g. laps with SC or VSC)\",\n","         transform=ax.transAxes, fontsize=8, color='white', ha='left', va='bottom')\n","\n","plt.xticks(np.arange(0, laps_driver1['LapNumber'].count() + 1, step=2))   #or laps_driver1['LapNumber'].min() when u don't start lap 1\n","ax.set(ylabel='Laptime (min:sec)', xlabel='Lap')\n","ax.legend(loc=\"upper center\")\n","\n","plt.show()"],"metadata":{"id":"pyKgnuRTUiD4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fig, ax = plt.subplots(figsize=(10,4))\n","fig.suptitle(f\"{driver1} vs {driver2} (Average distance)\")\n","\n","# Average distance (meters) between both drivers (just plot when they are together in race: 1-2, 4-5, 8-9...).\n","ax.plot(average_distance_driver1_driver2['Lap'], average_distance_driver1_driver2['Mean'], label='Mean')\n","ax.plot(average_distance_driver1_driver2['Lap'], average_distance_driver1_driver2['Median'], label='Median')\n","\n","plt.text(0.02, 0.92, f\"This plot only represents the distance for the {average_distance_driver1_driver2['Lap'].count()} laps\\n\"\n","                     f\"in which {driver1} was ahead of {driver2} by only 1 position\",\n","         transform=ax.transAxes, fontsize=8, color='white', ha='left', va='bottom')\n","\n","plt.xticks(np.arange(0, average_distance_driver1_driver2['Lap'].count() + 1, step=2))   # or laps_driver1['LapNumber'].min() when u don't start lap 1\n","ax.set(ylabel=f\"Distance {driver1} to {driver2} (m)\", xlabel='Lap')\n","ax.legend(loc=\"upper center\")\n","\n","plt.show()"],"metadata":{"id":"Vtswv5rppNyg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### ***Plot: Telemetry***"],"metadata":{"id":"dtN2RQ8FyrTB"}},{"cell_type":"code","source":["# Get lap data (telemetry plots lap 15)\n","lap_analyze2 = 15\n","lap_telemetry_driver1 = laps_driver1.loc[laps_driver1['LapNumber']==lap_analyze2].get_car_data().add_distance()\n","lap_telemetry_driver2 = laps_driver2.loc[laps_driver2['LapNumber']==lap_analyze2].get_car_data().add_distance()\n","\n","# Just to see distance between drivers\n","distance_lap12 = full_distance_driver1_driver2.loc[full_distance_driver1_driver2['Lap']==12]\n","distance_lap13 = full_distance_driver1_driver2.loc[full_distance_driver1_driver2['Lap']==13]\n","distance_lap14 = full_distance_driver1_driver2.loc[full_distance_driver1_driver2['Lap']==14]\n","distance_lap15 = full_distance_driver1_driver2.loc[full_distance_driver1_driver2['Lap']==15]"],"metadata":{"id":"kFayMGb5yrCx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fig, ax = plt.subplots(6, figsize=(14,15), gridspec_kw={'height_ratios': [1.5, 2, 0.8, 1, 0.8, 0.8]})\n","\n","ax[0].title.set_text(f\"Lap {lap_analyze2} Telemetry, {driver1} vs {driver2} - {session.event.year} {session.event.EventName}\\n\")\n","\n","# Distance (m)\n","ax[0].plot(distance_lap12['Distance'], distance_lap12['DistanceToDriverAhead'], label='Lap 12', linestyle='dashed', color='grey')\n","ax[0].plot(distance_lap13['Distance'], distance_lap13['DistanceToDriverAhead'], label='Lap 13', linestyle='dashdot', color='lightgrey')\n","ax[0].plot(distance_lap14['Distance'], distance_lap14['DistanceToDriverAhead'], label='Lap 14', linestyle='dotted', color='white')\n","ax[0].plot(distance_lap15['Distance'], distance_lap15['DistanceToDriverAhead'], label='Lap 15', color=driver1_color)\n","ax[0].set_ylabel(f'Distance to {driver1} (m)', fontsize=13)\n","ax[0].legend(loc=\"lower right\")\n","\n","# Speed\n","ax[1].plot(lap_telemetry_driver1['Distance'], lap_telemetry_driver1['Speed'], label=driver1, color=driver1_color)\n","ax[1].plot(lap_telemetry_driver2['Distance'], lap_telemetry_driver2['Speed'], label=driver2, color=driver2_color)\n","ax[1].set_ylabel('Speed (km/h)', fontsize=13)\n","ax[1].legend(loc=\"upper center\")\n","\n","# Delta\n","twin = ax[1].twinx()   # right scale\n","twin.plot(ref_tel['Distance'], delta_time, '--', color='white')\n","twin.set_ylabel(f\"<-- {driver2} ahead | {driver1} ahead -->\", size=15)\n","\n","# Maximum and Minimum speed of drivers\n","driver1_max_speed = lap_telemetry_driver1['Speed'].max()\n","driver1_min_speed = lap_telemetry_driver1['Speed'].min()\n","driver2_max_speed = lap_telemetry_driver2['Speed'].max()\n","driver2_min_speed = lap_telemetry_driver2['Speed'].min()\n","ax[1].annotate(f'{driver1}: {driver1_max_speed} km/h', (lap_telemetry_driver1['Distance'][lap_telemetry_driver1['Speed'].idxmax()], driver1_max_speed), textcoords=\"offset points\", xytext=(0, 0), ha='left', color='white')   #valores x,y | posición texto\n","ax[1].annotate(f'{driver1}: {driver1_min_speed} km/h', (lap_telemetry_driver1['Distance'][lap_telemetry_driver1['Speed'].idxmin()], driver1_min_speed), textcoords=\"offset points\", xytext=(0, 0), ha='left', color='white')\n","ax[1].annotate(f'{driver2}: {driver2_max_speed} km/h', (lap_telemetry_driver2['Distance'][lap_telemetry_driver2['Speed'].idxmax()], driver2_max_speed), textcoords=\"offset points\", xytext=(0, 5), ha='left', color='white')\n","ax[1].annotate(f'{driver2}: {driver2_min_speed} km/h', (lap_telemetry_driver2['Distance'][lap_telemetry_driver2['Speed'].idxmin()], driver2_min_speed), textcoords=\"offset points\", xytext=(0, -10), ha='left', color='white')\n","\n","# Gear\n","ax[2].plot(lap_telemetry_driver1['Distance'], lap_telemetry_driver1['nGear'], label=driver1, color=driver1_color)\n","ax[2].plot(lap_telemetry_driver2['Distance'], lap_telemetry_driver2['nGear'], label=driver2, color=driver2_color)\n","ax[2].set_ylabel('Gear', fontsize=13)\n","\n","# Throttle\n","ax[3].plot(lap_telemetry_driver1['Distance'], lap_telemetry_driver1['Throttle'], label=driver1, color=driver1_color)\n","ax[3].plot(lap_telemetry_driver2['Distance'], lap_telemetry_driver2['Throttle'], label=driver2, color=driver2_color)\n","ax[3].set_ylabel('Throttle (%)', fontsize=13)\n","\n","# Brake\n","ax[4].plot(lap_telemetry_driver1['Distance'], lap_telemetry_driver1['Brake'], label=driver1, color=driver1_color)\n","ax[4].plot(lap_telemetry_driver2['Distance'], lap_telemetry_driver2['Brake'], label=driver2, color=driver2_color)\n","ax[4].set_ylabel('Off - Brakes - On', fontsize=13)\n","\n","# DRS\n","ax[5].plot(lap_telemetry_driver1['Distance'], lap_telemetry_driver1['DRS'], label=driver1, color=driver1_color)\n","ax[5].plot(lap_telemetry_driver2['Distance'], lap_telemetry_driver2['DRS'], label=driver2, color=driver2_color)\n","ax[5].set_ylabel('Off - DRS - On', fontsize=13)\n","ax[5].set(xlabel='Lap distance (m)')\n","\n","# Hide axis labels on subplots that are not on the outer edges\n","for a in ax.flat:\n","    a.label_outer()\n","\n","# No space in the sides\n","for i in range(5):\n","    ax[i].set_xlim(0, max(lap_telemetry_driver1['Distance']))\n","\n","#plt.savefig(f\"/content/drive/MyDrive/F1/17.Qatar_(Losail)_23/Fotos/full_telemetry.png\", bbox_inches='tight', dpi=500)\n","\n","plt.show()"],"metadata":{"id":"q-2qvaAAzK1C"},"execution_count":null,"outputs":[]}]}