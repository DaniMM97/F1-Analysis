{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1SIp2PC-O2Lf720WwTL9XbDTSUuJVp22U","authorship_tag":"ABX9TyMrua2XlvY2+W/8BapOx9mO"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## *What tire compound was faster at which point during the wet laps and while the track was drying out (Zandvoort GP 2023)?*"],"metadata":{"id":"c2iGBYypYliW"}},{"cell_type":"markdown","source":["Source: https://medium.com/towards-formula-1-analysis/formula-1-data-analysis-tutorial-2021-russian-gp-to-box-or-not-to-box-da6399bd4a39"],"metadata":{"id":"g1_2NlFYYw7v"}},{"cell_type":"markdown","source":["It's really useful for when it starts to rain, or when it stops and the track starts to dry out. You need different tire strategies to compare, if everyone is wearing the same tire the graph will not work."],"metadata":{"id":"lbQPCHtpje3d"}},{"cell_type":"markdown","source":["# 1º: Setting the work environment up"],"metadata":{"id":"-y7MnIvPjOsh"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"_Cet6BF5gHWW"},"outputs":[],"source":["!pip install fastf1"]},{"cell_type":"code","source":["import fastf1 as ff1\n","from fastf1 import plotting\n","from matplotlib import pyplot as plt\n","from matplotlib.pyplot import figure\n","from matplotlib.collections import LineCollection\n","import pandas as pd"],"metadata":{"id":"9TIPdlgigYnG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5VIcFRXUg5q4","executionInfo":{"status":"ok","timestamp":1694716318131,"user_tz":-120,"elapsed":35011,"user":{"displayName":"Daniel Muñoz Martínez","userId":"06122393357673151477"}},"outputId":"8620b048-ba4a-4fe8-9e0d-d90eb46629f0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["# Setup plotting\n","plotting.setup_mpl()\n","\n","# Set the cache directory (need a 'cache' folder) avoid long waiting times\n","ff1.Cache.enable_cache('/content/drive/MyDrive/F1/cache')\n","\n","# Ignore pandas warnings\n","pd.options.mode.chained_assignment = None"],"metadata":{"id":"6z4zzA84hmzp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 2º: Select the data"],"metadata":{"id":"HqIMJvsvjTmf"}},{"cell_type":"code","source":["race = ff1.get_session(2023, 'Zandvoort', 'R')"],"metadata":{"id":"YXLpxC30gaZy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["race.load()"],"metadata":{"id":"rbFr7c2mhyHx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Get the race laps\n","laps = race.laps"],"metadata":{"id":"C9LHOIhlh0lf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Starting from lap 1, when started raining (max 10 to reduce loading times). This determines the turns you can plot\n","laps = laps.loc[(laps['LapNumber'] >= 1) & (laps['LapNumber'] <= 10)]"],"metadata":{"id":"Ejt61z97jMp8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Telemetry data"],"metadata":{"id":"DhJ6OBSV4Q2X"}},{"cell_type":"code","source":["# Get all drivers, we don't want them repeated\n","drivers = pd.unique(laps['Driver'])\n","\n","# New DF (empty for now)\n","telemetry = pd.DataFrame()\n","\n","# Telemetry can only be obtained driver-by-driver, so we loop to get all drivers telemetry (and then for each individual lap).\n","for driver in drivers:\n","    driver_laps = laps.pick_driver(driver)\n","\n","    # Completing the DF: since we want to compare distances, we need to collect telemetry lap-by-lap (.iter) to reset the distance\n","    for lap in driver_laps.iterlaps():\n","        driver_telemetry = lap[1].get_telemetry().add_distance()       # .get_telemetry because we want 'X' n 'Y' (the circuit layout)\n","        driver_telemetry['Driver'] = driver\n","        driver_telemetry['Lap'] = lap[1]['LapNumber']                  # [1]: we avoid the column titles [0]. 1 lap for every loop (that's why [2] doesn't work)\n","        driver_telemetry['Compound'] = lap[1]['Compound']\n","\n","        telemetry = telemetry.append(driver_telemetry)"],"metadata":{"id":"VzrEr6bYjMmf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# We only want some columns\n","telemetry = telemetry[['Lap', 'Distance', 'Compound', 'Speed', 'X','Y']]\n","\n","# If not intermediate or wet tire -> slick\n","telemetry.loc[(telemetry['Compound'] != 'INTERMEDIATE') & (telemetry['Compound'] != 'WET'), 'Compound'] = 'SLICK'"],"metadata":{"id":"LR9OeGwrjMjt"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Minisectors"],"metadata":{"id":"s-YXnBY14O5K"}},{"cell_type":"code","source":["total_distance = max(telemetry['Distance'])\n","\n","# We want 30 mini-sectors (can change)\n","total_minisectors = 30\n","\n","# Equally sized minisectors\n","length_minisector = total_distance / total_minisectors\n","\n","# List of minisector distances\n","minisectors = [0]\n","for i in range(0, (total_minisectors - 1)):\n","    minisectors.append(length_minisector * (i + 1))"],"metadata":{"id":"DBlvUPzaneuI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Assign minisector to every row in the telemetry data\n","telemetry['Minisector'] = telemetry['Distance'].apply(\n","    lambda y: minisectors.index(min(minisectors, key=lambda x: abs(x - y))) + 1)\n","\n","''' alternative:\n","minisector_indices = []\n","\n","for distance in telemetry['Distance']:\n","    closest_value = min(minisectors, key=lambda x: abs(x - distance))\n","    minisector_index = minisectors.index(closest_value) + 1\n","    minisector_indices.append(minisector_index)\n","\n","telemetry['Minisector'] = minisector_indices\n","'''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":53},"id":"T2ATzGAZngj2","executionInfo":{"status":"ok","timestamp":1694716540800,"user_tz":-120,"elapsed":1126,"user":{"displayName":"Daniel Muñoz Martínez","userId":"06122393357673151477"}},"outputId":"6fe68cda-694c-404f-f04a-a80e53e20c4c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\" alternative:\\nminisector_indices = []\\n\\nfor distance in telemetry['Distance']:\\n    closest_value = min(minisectors, key=lambda x: abs(x - distance))\\n    minisector_index = minisectors.index(closest_value) + 1\\n    minisector_indices.append(minisector_index)\\n\\ntelemetry['Minisector'] = minisector_indices\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["# Calculate avg compound speed per minisector (lap 1- minisector 1,2,3,4... / lap 2- minisector 1,2,3,4... / ...)\n","average_speed = telemetry.groupby(['Lap', 'Minisector', 'Compound'])['Speed'].mean().reset_index()"],"metadata":{"id":"OsXNyHAbqCdu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Fastest compound"],"metadata":{"id":"cn1bv6fz8gw7"}},{"cell_type":"code","source":["# Select the compound with the highest average speed\n","fastest_compounds = average_speed.loc[average_speed.groupby(['Lap', 'Minisector'])['Speed'].idxmax()]\n","\n","# Delete speed column and rename the Compound column\n","fastest_compounds = fastest_compounds[['Lap', 'Minisector', 'Compound']].rename(columns={'Compound': 'Fastest_compound'})\n"],"metadata":{"id":"_QvEcR_fnm7L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Join the fastest compound per minisector with the full telemetry\n","telemetry = telemetry.merge(fastest_compounds, on=['Lap', 'Minisector'])\n","\n","# Order by distance (- to +)\n","telemetry = telemetry.sort_values(by=['Distance'])\n","\n","# Assign integer value to the compound in order to plot\n","telemetry.loc[telemetry['Fastest_compound'] == \"INTERMEDIATE\", 'Fastest_compound_int'] = 1\n","telemetry.loc[telemetry['Fastest_compound'] == \"SLICK\", 'Fastest_compound_int'] = 2"],"metadata":{"id":"hPtUEa9VnpFN"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 3º: Plotting"],"metadata":{"id":"PTjz9ecynqoW"}},{"cell_type":"markdown","source":["When analyzing this graph, two main problems arise:\n","* On the one hand, lap speed depends not only on tire compound and track\n","conditions but also on the driver's skill. This means that a skilled driver can potentially distort the results, making a tire appear better or worse than it should theoretically.\n","* On the other hand, it's not enough to analyze only the fastest tire. One must decide whether it's worth making a pit stop, which involves saving time per lap, or if it's better to stay on the track, even if it means going slower, in order to compensate for the 20-30 seconds saved during the pit stop.\n","\n","To add further complexity, there's another crucial variable: the weather during the next few laps. This analysis is typically conducted when there is a short period of rain, and it's known that the track will dry out later."],"metadata":{"id":"WTb3Vk_VxPF4"}},{"cell_type":"code","source":["def generate_minisector_plot(lap, save=True, details=True):\n","    single_lap = telemetry.loc[telemetry['Lap'] == lap]\n","\n","# Where the car is at any moment in time ('x' n 'y' are columns in telemetry)\n","    x = np.array(single_lap['X'].values)\n","    y = np.array(single_lap['Y'].values)\n","\n","# Create points, and with them, segments (converting it to the appropriate numpy data types)\n","    points = np.array([x, y]).T.reshape(-1, 1, 2)\n","    segments = np.concatenate([points[:-1], points[1:]], axis=1)\n","    compound = single_lap['Fastest_compound_int'].to_numpy().astype(float)\n","\n","# Create a line collection (coloring). Set a segmented colormap and normalize the plot to full integer values of the colormap\n","    colors = plt.get_cmap('ocean', 2)\n","    line_col = LineCollection(segments, norm=plt.Normalize(1, colors.N+1), cmap=colors)    # Combines segments into a line (shape)\n","    line_col.set_array(compound)\n","    line_col.set_linewidth(3)\n","\n","# Create the plot (circuit shape)\n","    plt.figure(figsize=(10, 5))\n","    if details:\n","        title = plt.suptitle(f\"2023 Zandvoort GP \\n Lap {lap} - Slicks vs. Inters\")\n","\n","    plt.gca().add_collection(line_col)\n","    plt.axis('equal')\n","    plt.tick_params(labelleft=False, left=False, labelbottom=False, bottom=False)\n","\n","# Add a lateral colorbar to the plot (legend)\n","    if details:\n","        cbar = plt.colorbar(mappable=line_col, boundaries=np.arange(1, 4))\n","        cbar.set_ticks(np.arange(1.5, 3.5))\n","        cbar.set_ticklabels(['Inters', 'Slicks'])\n","\n","# To save the plot as an image\n","    if save:\n","        plt.savefig(f\"/content/drive/MyDrive/F1/minisectors_lap_{lap}.png\", dpi=500)\n","\n","# Represent it\n","    plt.show()\n","\n","# This can be done for several consecutive laps to see the evolution. Then you can make a gif for better visualization.\n","generate_minisector_plot(7, save=False, details=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"53Jr63H6ns-Z","executionInfo":{"status":"ok","timestamp":1694724394117,"user_tz":-120,"elapsed":1141,"user":{"displayName":"Daniel Muñoz Martínez","userId":"06122393357673151477"}},"outputId":"9164d777-c85a-4b46-cba7-1d14577d7315"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]}]}